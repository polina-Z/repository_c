#define MAX 2147483646
#define MAX_F 3.402823466e+35F
#define EPS 1e-12

#include <stdio.h>
#include <math.h>
#include <Windows.h>

int verificationI(int n)
{
	int choice = 0;
	char term1;
	while (1)
	{
		rewind(stdin);
		if (scanf_s("%d%c", &choice, &term1) != 2 || term1 != '\n' || choice <= 0 || choice > n)
		{
			printf("Неправильный ввод.\n");
		}
		else
		{
			return choice;
		}
	}
}

void encoder()
{
	printf("Введите строку, которую необходимо зашифровать.\n");
	char string[101];
	rewind(stdin);
	int i = 0;
	for (int i = 0; i < 101; i++)
	{
		string[i] = ' ';
	}
	gets(string);
	rewind(stdin);

	while (string[i] != '\0')
	{
		i++;
	}
	int check = i;
	i = 0;

	int counter;
	counter = ceil(sqrt(check));
	if (counter * counter > check)
	{
		for (int i = check; i < counter * counter; i++)
		{
			string[i] = ' ';
		}
	}

	char** array = (char**)malloc(counter * sizeof(char));
	for (int i = 0; i < counter; i++) {
		array[i] = (char*)malloc(counter * sizeof(char));
	}

	int q = 0;
	int k = 0;
	for (k = 1; k <= counter / 2; k++) 
	{
		for (int j = k - 1; j < counter - k + 1; j++) 
		{
			array[j][k - 1] = string[q];
			q++;
		}

		for (int j = k; j < counter - k; j++) 
		{
			array[counter - k][j] = string[q];
			q++;
		}

		for (int j = counter - k; j > k - 1; j--) 
		{
			array[j][counter - k] = string[q];
			q++;
		}

		for (int j = counter - k; j >= k; j--) 
		{
			array[k - 1][j] = string[q];
			q++;
		}
	}

	if (counter % 2 == 1)
	{
		array[counter / 2][counter / 2] = string[q];
	}
	for (int i = 0; i < counter; i++)
	{
		for (int j = 0; j < counter; j++)
		{
			printf("%c", array[i][j]);
		}
	}
	printf("\n");
	for (int i = 0; i < counter; i++)
	{
		free(array[i]);
	}
	free(array);
}

void decoder()
{
	printf("Введите строку, которую необходимо дешифровать.\n");
	char string[101];
	rewind(stdin);
	int i = 0;
	for (int i = 0; i < 101; i++)
	{
		string[i] = ' ';
	}
	gets(string);
	rewind(stdin);

	while (string[i] != '\0')
	{
		i++;
	}
	int check = i;
	i = 0;

	int counter;
	counter = ceil(sqrt(check));
	if (counter * counter > check)
	{
		for (int i = check; i < counter * counter; i++)
		{
			string[i] = ' ';
		}
	}

	char** array = (char**)malloc(counter * sizeof(char));
	for (int i = 0; i < counter; i++) {
		array[i] = (char*)malloc(counter * sizeof(char));
	}

	int q = 0;

	for (int i = 0; i < counter; i++)
	{
		for (int j = 0; j < counter; j++)
		{
			array[i][j] = string[q];
			q++;
		}
	}
	q = 0;
	int k = 0;

	for (k = 1; k <= counter / 2; k++)
	{
		for (int j = k - 1; j < counter - k + 1; j++) 
		{
			printf("%c", array[j][k - 1]);
			
		}

		for (int j = k; j < counter - k; j++) 
		{
			printf("%c", array[counter - k][j]);
		}

		for (int j = counter - k; j > k - 1; j--) 
		{
			printf("%c", array[j][counter - k]);
		}

		for (int j = counter - k; j >= k; j--)
		{
			printf("%c", array[k - 1][j]);
		}
	}

	if (counter % 2 == 1)
	{
		printf("%c", array[counter / 2][counter / 2]);
	}
	printf("\n");
	for (int i = 0; i < counter; i++)
	{
		free(array[i]);
	}
	free(array);
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	while (1 == 1)
	{
		printf("%s\n", "\t\t\t\t Mеню");
		printf("%s\n", "\t\t\t1 - Зашифровать");
		printf("%s\n", "\t\t\t2 - Дешифровать");
		printf("%s\n", "\t\t\t3 - Завершить программу");
		int check = 0;
		check = verificationI(3);
		switch (check)
		{
			case 1: encoder();
				break;
			case 2: decoder();
				break;
			case 3: return 0;
		}
	}
	return 0;
}
