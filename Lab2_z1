#define MAX 2147483646
#define MAX_F 3.402823466e+35F
#define EPS 1e-12

#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <Windows.h> 
int flag = 0;

struct  car
{
	float cost;
	int year;
	float volume;
	float distance;
	float HaulageCost;
	float CustomsClearanceCost;
	float TotalPrice;
};

struct car Zero()
{
	struct car vehicle;
	vehicle.cost = 0;
	vehicle.year = 0;
	vehicle.volume = 0;
	vehicle.distance = 0;
	vehicle.HaulageCost = 0;
	vehicle.CustomsClearanceCost = 0;
	vehicle.TotalPrice = 0;
	return vehicle;
}

float verification_f()
{
	float f;
	char term;
	while (1)
	{
		rewind(stdin);
		if (scanf_s("%f%c", &f, &term) != 2 || term != '\n' || (f> MAX_F && f < -MAX_F) || f < 0 || (f > -EPS && f < EPS))
		{
			printf("Неверный ввод. \n");
		}
		else
		{
			break;
		}
	}
	return f;
}

int verification_i(int n)
{
	int choice = 0;
	char term1;
	while (1)
	{
		rewind(stdin);
		if (scanf_s("%d%c", &choice, &term1) != 2 || term1 != '\n' || choice <= 0 || choice > n)
		{
			printf("Неправильный ввод.\n");
		}
		else
		{
			return choice;
		}
	}
}

float cost()
{
	float cost;
	printf("Введите стоимость автомобиля\n");
	cost = verification_f();
	return cost;
}

int year()
{
	int year = 0;
	printf("Введите год выпуска автомобиля\n");
	year = verification_i(2020);
	return year;
}

float volume()
{
	float volume;
	printf("Введите объем двигателя\n");
	volume = verification_f();
	return volume;
}

float distance()
{
	float distance;
	printf("Введите расстояние прогона(км)\n");
	distance = verification_f();
	return distance;
}

struct car Add_item()
{
	struct car vehicle;
	vehicle = Zero();
	int flag1 = 0, flag2 = 0, flag3 = 0;
	while (1)
	{
		int choice2 = 0;
		printf("%s\n", "\t\t\t\t\t\t Mеню2");
		printf("%s\n", "\t\t\t1 - Ввод стоимости автомобиля");
		printf("%s\n", "\t\t\t2 - Ввод года выпуска автомобиля");
		printf("%s\n", "\t\t\t3 - Ввод объема двигателя");
		printf("%s\n", "\t\t\t4 - Ввод расстояния прогона(км)");
		printf("%s\n", "\t\t\t5 - Расчет стоимости услуги");
		printf("%s\n", "\t\t\t6 - Завершить ввод");
		choice2 = verification_i(7);

		if (choice2 == 1)
		{
			vehicle.cost = cost();
		}
		if (choice2 == 2)
		{
			vehicle.year = year();
			flag2 = 1;
		}

		if (choice2 == 3)
		{
			vehicle.volume = volume();
			flag3 = 1;
		}

		if (choice2 == 4)
		{
			vehicle.distance = distance();
			flag1 = 1;
		}

		if (choice2 == 5)
		{
			if (flag1 == 1)
			{
				vehicle.HaulageCost = (float)0.5 * vehicle.distance;
			}
			else
			{
				vehicle.HaulageCost = 0;
			}

			if (flag2 == 1 && flag3 == 1)
			{
				if (vehicle.year <= 3)
				{
					vehicle.CustomsClearanceCost = (float)0.6 * vehicle.volume;
				}

				if (vehicle.year > 3 && vehicle.year <= 10)
				{
					if (vehicle.volume < 2500)
					{
						vehicle.CustomsClearanceCost = (float)0.35 * vehicle.volume;
					}
					else vehicle.CustomsClearanceCost = (float)0.6 * vehicle.volume;
				}

				if (vehicle.year > 10 && vehicle.year < 14)
				{
					vehicle.CustomsClearanceCost = (float)0.6 * vehicle.volume;
				}

				if (vehicle.year >= 14)
				{
					vehicle.CustomsClearanceCost = (float)2 * vehicle.volume;
				}
			}
			else
			{
				
				vehicle.CustomsClearanceCost = 0;

			}

			if (flag1 == 1 && flag2 == 1 && flag3 == 1)
			{
				vehicle.TotalPrice = vehicle.CustomsClearanceCost + vehicle.HaulageCost;
			}
			else
			{
				printf("Сначала введите объем двигателя, год выпуска автомобиля и расстояние прогона\n");
				vehicle.TotalPrice = 0;
			}
		}

		if (choice2 == 6)
		{
			break;
		}
	}
	return vehicle;
}

void Information(const struct car* Transport, int counter)
{
	
	int i;
	if (counter == 0 && flag == 0)
	{
		printf("Введите информацию хотя бы об одном автомобиле\n");
	}
	else
	{
		if (counter == 0)
		{
			printf("%2d %10.2f %10d %10.4f %10.4f %10.2f", 1, Transport[0].cost, Transport[0].year, Transport[0].volume, Transport[0].distance, Transport[0].TotalPrice);
			printf("\n");
		}
		else
		{
			for (i = 0; i < counter + 1; i++)
			{
				printf("%3d %10.2f %10d %10.4f %10.4f %10.2f", i + 1, Transport[i].cost, Transport[i].year, Transport[i].volume, Transport[i].distance, Transport[i].TotalPrice);
				printf("\n");
			}
		}
	}
	
}

void change(struct car* Transport, int counter)
{
	Information(Transport, counter);
	if (counter == 0 && flag == 0)
	{
		return 0;
	}
	printf("Введите номер автомобиля, о котором вы хотете изменить информацию\n");
	int choice = verification_i(counter + 1);
	for (int i = 0; i < counter + 1; i++)
	{
		if (i  == choice - 1)
		{
			while (1)
			{
				printf("Что вы хотите изменить?\n");
				printf("%s\n", "\t\t\t1 - Стоимость автомобиля");
				printf("%s\n", "\t\t\t2 - Год выпуска автомобиля");
				printf("%s\n", "\t\t\t3 - Объем двигателя");
				printf("%s\n", "\t\t\t4 - Расстояние прогона(км)");
				printf("%s\n", "\t\t\t5 - Завершить изменение\n");
				choice = verification_i(5);
				switch (choice)
				{
					case 1:
						Transport[i].cost = cost();
						break;
					case 2:
						Transport[i].year = year();
						break;
					case 3:
						Transport[i].volume = volume();
						break;
					case 4:
						Transport[i].distance = distance();
						break;
					case 5:
						return 0;
				}
			}
		}
	}
}



int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	struct car* Transport;
	int counter = 0;

	if ((Transport = (struct car*)malloc(1 * sizeof(struct car))) == NULL)
	{
		printf("Ошибка выделения памяти\n");
	}
	else
	{
		Transport[counter] = Zero();
	}
	
	while (1 == 1)
	{
		int choice = 0;
		printf("%s\n", "\t\t\t\t\t\t Mеню");
		printf("%s\n", "\t\t\t1 - Добавить информацию об автомобиле");
		printf("%s\n", "\t\t\t2 - Вывод информации об автомобилях");
		printf("%s\n", "\t\t\t3 - Информация об авторе программы");
		printf("%s\n", "\t\t\t4 - Изменение информации об автомобиле");
		printf("%s\n", "\t\t\t5 - Выход из программы");

		choice = verification_i(5);

		if (choice == 5) break;

		if (choice == 1)
		{
			if (flag == 1)
			{
				counter++;
			}

			if (counter == 0)
			{
				Transport[counter] = Add_item();
				
			}
			else
			{
				if ((Transport = (struct car*)realloc(Transport, (counter + 2) * sizeof(struct car))) == NULL)
				{
					printf("Ошибка выделения памяти\n");
				}
				else
				{
					Transport[counter] = Zero();	
					Transport[counter] = Add_item();				
				}
			}
			flag = 1;
		}

		if (choice == 2)
		{
			printf("\n");
			Information(Transport, counter);
		}

		if (choice == 3)
		{
			printf("Автор: Зорко П.А.\n");
		}
		
		if (choice == 4)
		{
			change(Transport, counter);
		}
		printf("\n");
	}
	free(Transport);
	return 0;
}
